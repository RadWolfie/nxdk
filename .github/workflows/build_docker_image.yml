name: Build Docker image

on:
  push:

jobs:
  main:
    name: Docker
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        # TODO: Uncomment everything in matrix below for production use
        #image-name: [nxdk, nxdk-debug, nxdk-lto]
        # TODO: Remove line below to use above instead in production use
        image-name: [nxdk-debug]
        include:
          #- image-name: nxdk
          #  build-args: buildparams=CFLAGS=-O2 CXXFLAGS=-O2
          - image-name: nxdk-debug
            build-args: buildparams=DEBUG=y
          #- image-name: nxdk-lto
          #  build-args: buildparams=LTO=y CFLAGS=-O2 CXXFLAGS=-O2
    steps:
      - name: Clone Tree
        uses: actions/checkout@v3
        with:
          submodules: recursive
      # Require setup environments for reuse in steps.
      - name: Setup environments for docker usage
        run: |
          echo "timestamp=$(date --rfc-3339=seconds --utc)" >> $GITHUB_ENV
          DOCKER_USER_IMAGE=$(echo ${{ github.repository_owner }}/${{ matrix.image-name }}|tr '[:upper:]' '[:lower:]')
          echo "DOCKER_USER_IMAGE=${DOCKER_USER_IMAGE}" >> $GITHUB_ENV
          DOCKER_GITHUB_IMAGE=ghcr.io/${DOCKER_USER_IMAGE}
          echo "DOCKER_TAGS=${DOCKER_GITHUB_IMAGE}:latest,${DOCKER_GITHUB_IMAGE}:git-${GITHUB_SHA::8}" >> $GITHUB_ENV
      - name: Setup DockerHub tags
        #TODO: Uncomment below for production use
        #if: github.repository_owner == 'XboxDev' && github.ref == 'refs/heads/master'
        run: echo "DOCKER_TAGS=${{ env.DOCKER_TAGS }},${{ env.DOCKER_USER_IMAGE }}:latest,${{ env.DOCKER_USER_IMAGE }}:git-${GITHUB_SHA::8}" >> $GITHUB_ENV
      # Multi-platforms support will require docker's QEMU action but in our case, x86_64, we don't need it.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Do linux/amd64 build only.
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: ${{ matrix.build-args }}
          # Optional but might be recommended if future OS change arch to something else. Which may require docker's QEMU action.
          platforms: linux/amd64
          load: true
          # Require plain image-name[:tag] here in order to do the test without docker warning about image not found.
          # And to skip local image from push step.
          tags: ${{ matrix.image-name }}
          #labels: |
          #  org.opencontainers.image.revision=${{ github.sha }}
          #  org.opencontainers.image.created=${{ env.timestamp }}
      - name: Test Docker image
        run: |
          cd samples
          for dir in */
          do
            cd "$dir"
            docker run --rm -v `pwd`:/usr/src/app -t ${{ matrix.image-name }} make -j`nproc`
            cd ..
          done
      - name: Login to DockerHub
        if: github.repository_owner == 'XboxDev' && github.ref == 'refs/heads/master'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        #TODO: Uncomment below for production use
        #if: github.ref == 'refs/heads/master'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push docker image
        #TODO: Uncomment below for production use
        #if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: ${{ matrix.build-args }}
          platforms: linux/amd64,linux/386
          # TODO: Uncomment below for production use
          #push: true
          # NOTE: do not allow plain image-name[:tag] here or push to registry will fail!
          tags: ${{ env.DOCKER_TAGS }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ env.timestamp }}
